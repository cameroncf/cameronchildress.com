# ~~ Generated by projen. To modify, edit .projenrc.ts and run "npx projen".

name: release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
      tag_exists: ${{ steps.check_tag_exists.outputs.exists }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Install dependencies
        run: pnpm i --frozen-lockfile
      - name: release
        run: npx projen release
      - name: Check if version has already been tagged
        id: check_tag_exists
        run: |-
          TAG=$(cat content/.vitepress/dist/releasetag.txt)
          ([ ! -z "$TAG" ] && git ls-remote -q --exit-code --tags origin $TAG && (echo "exists=true" >> $GITHUB_OUTPUT)) || (echo "exists=false" >> $GITHUB_OUTPUT)
          cat $GITHUB_OUTPUT
      - name: Check for new commits
        id: git_remote
        run: |-
          echo "latest_commit=$(git ls-remote origin -h ${{ github.ref }} | cut -f1)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Backup artifact permissions
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: cd content/.vitepress/dist && getfacl -R . > permissions-backup.acl
        continue-on-error: true
      - name: Upload artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: content/.vitepress/dist
          overwrite: true
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.tag_exists != 'true' && needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: dist
      - name: Restore build artifact permissions
        run: cd dist && setfacl --restore=permissions-backup.acl
        continue-on-error: true
      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.sha }}
        run: errout=$(mktemp); gh release create $(cat content/.vitepress/dist/releasetag.txt) -R $GITHUB_REPOSITORY -F content/.vitepress/dist/changelog.md -t $(cat content/.vitepress/dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
  netlify-publish:
    name: netlify-publish
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    concurrency: netlify-publish
    env:
      CI: "true"
    if: startsWith( github.ref, 'refs/heads/main' )
    steps:
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: "9"
      - name: Install Netlify CLI
        run: pnpm add netlify-cli
      - name: Deploy to Netlify
        id: deploy-step
        env:
          NETLIFY_DEPLOY_DIR: content/.vitepress/dist
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: 7840347a-1605-469f-878f-bc76c7333db4
          PREVIEW_ALIAS: pr-${{ github.event.number }}
        run: |-
          DEPLOY_URL=$(netlify deploy --dir=$NETLIFY_DEPLOY_DIR --alias=$PREVIEW_ALIAS --json | jq -r '.deploy_url')
          echo "DEPLOY_URL=$DEPLOY_URL" >> "$GITHUB_OUTPUT"
      - name: Publish Summary
        env:
          DEPLOY_URL: ${{ steps.deploy-step.outputs.DEPLOY_URL }}
        run: |-
          echo "### Deploy Complete! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "- Netlify Preview URL: $DEPLOY_URL" >> $GITHUB_STEP_SUMMARY
      - name: Audit URL(s) using Lighthouse
        uses: treosh/lighthouse-ci-action@v11
        env:
          DEPLOY_URL: ${{ steps.deploy-step.outputs.DEPLOY_URL }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
        with:
          urls: $DEPLOY_URL
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
